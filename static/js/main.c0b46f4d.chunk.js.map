{"version":3,"sources":["Card.js","CardList.js","serviceWorker.js","Robots.js","SearchBox.js","Scroll.js","ErrorBoundary.js","App.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","Robots","cardComponent","map","user","i","key","username","Email","Boolean","window","location","hostname","match","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasError","this","setState","React","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4MAceA,G,MAZF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAKC,EAAc,EAAdA,MAAMC,EAAQ,EAARA,GACtB,OACI,yBAAKC,UAAU,iDACX,yBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,WACpD,6BACI,4BAAKL,GACL,2BAAIC,OCMLK,EAXE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OACTC,EAAeD,EAAOE,KAAI,SAACC,EAAKC,GAClC,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGT,GAAIK,EAAOI,GAAGT,GAAIF,KAAMO,EAAOI,GAAGE,SAAUZ,MAAOM,EAAOI,GAAGG,WAErF,OACG,6BACKN,ICGOO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,UClBOZ,EAAO,CAChB,CACIL,GAAI,EACJW,SAAU,SACVC,MAAO,oBAEX,CACIZ,GAAI,EACJW,SAAU,UACVC,MAAO,sB,4BCMAM,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACA,yBAAKlB,UAAU,OACX,2BACAA,UAAU,mCACVmB,KAAK,SACLC,YAAY,gBACZC,SAAWH,MCCJI,G,MARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UAC/DJ,EAAMK,YCmBJC,E,kDApBX,WAAYN,GAAO,IAAD,8BACd,cAAMA,IACDO,MAAM,CACPC,UAAU,GAHA,E,gEAOdC,KAAKC,SAAS,CAACF,UAAU,M,+BAGzB,OAAGC,KAAKF,MAAMC,SAEN,8DAIDC,KAAKT,MAAMK,a,GAjBEM,IAAMC,WC4CnBC,E,kDArCX,aAAc,IAAD,8BACT,gBAOJC,eAAiB,SAACC,GACd,EAAKL,SAAS,CAACM,YAAaD,EAAME,OAAOC,SAPzC,EAAKX,MAAM,CACP1B,OAAQA,EACRmC,YAAa,IAJR,E,gEAWO,IAAD,OACfG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAG,EAAKb,SAAS,CAAC7B,OAAQ0C,S,+BAGhC,IAAD,OACEC,EAAgBf,KAAKF,MAAM1B,OAAO4C,QAAO,SAAA5C,GAC3C,OAAOA,EAAOM,SAASuC,cAAcC,SAAS,EAAKpB,MAAMS,YAAYU,kBAEzE,OACI,yBAAKjD,UAAU,MACX,2CACA,kBAAC,EAAD,CAAWkB,aAAcc,KAAKK,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUjC,OAAQ2C,W,GA7BxBb,IAAMC,WCCxBgB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SNwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBd,MAAK,SAAAe,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c0b46f4d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name,email,id}) => {\r\n    return (\r\n        <div className=' bg-light-green dib br3 pa3 ma2 grow shadow-5'>\r\n            <img src={`https://robohash.org/${id}?200X200`} alt='Robots'/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({Robots}) =>{\r\n    const cardComponent= Robots.map((user,i) => {\r\n        return <Card key={i} id={Robots[i].id} name={Robots[i].username} email={Robots[i].Email}/> \r\n    })\r\n     return (\r\n        <div>\r\n            {cardComponent}\r\n        </div>\r\n    );  \r\n}\r\n\r\nexport default CardList;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","export const Robots=[\r\n    {\r\n        id: 1,\r\n        username: 'Vishal',\r\n        Email: 'vishal@gmail.com'\r\n    },\r\n    {\r\n        id: 2,\r\n        username: \"Akshara\",\r\n        Email: \"Akshara@gmail.com\"\r\n    }\r\n]","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return(\r\n    <div className='pa2'>\r\n        <input \r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search' \r\n        placeholder='search robots'\r\n        onChange= {searchChange}  \r\n    />\r\n    </div>\r\n    ) \r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflow: \"scroll\", border: \"5px solid black\", height: \"800px\"}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\n\r\nclass ErrorBoundary extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            hasError: false\r\n        }\r\n    }\r\n    componentDidCatch(){\r\n        this.setState({hasError: true});\r\n    }\r\n    render(){\r\n        if(this.state.hasError){\r\n            return(\r\n                <h1>Oops.....Sorry for the trouble\r\n                </h1>\r\n            )\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n\r\n","import React from 'react';\r\nimport CardList from './CardList';\r\nimport {Robots} from './Robots';\r\nimport SearchBox from './SearchBox';\r\nimport './App.css';\r\nimport Scroll from './Scroll';\r\nimport ErrorBoundary from './ErrorBoundary';\r\n\r\nclass App extends React.Component{\r\n\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            Robots: Robots,\r\n            searchfield: '',\r\n        }\r\n    }\r\n\r\n    onSearchChange = (event)=>{\r\n        this.setState({searchfield: event.target.value})\r\n    }\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=> response.json())\r\n        .then(users=> this.setState({Robots: users}))\r\n    }\r\n\r\n    render(){\r\n        const filteredRobots= this.state.Robots.filter(Robots=>{\r\n            return Robots.username.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n        })\r\n        return(\r\n            <div className=\"tc\">\r\n                <h1>RoBoFriends</h1>\r\n                <SearchBox searchChange={this.onSearchChange} />\r\n                <Scroll>\r\n                    <ErrorBoundary>\r\n                        <CardList Robots={filteredRobots}/>\r\n                    </ErrorBoundary>\r\n                </Scroll>\r\n                \r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport CardList from './CardList'\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport {Robots} from './Robots';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App/>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}